import { Dispatch, SetStateAction, RefObject } from "react";

export const handleKeyClick = (
  key: string,
  inputValues: string[],
  activeInputRef: RefObject<HTMLInputElement | null>,
  setActiveKeyboard: Dispatch<SetStateAction<string>>
): string[] => {
  let updatedValues = [...inputValues];

  const activeInput = activeInputRef.current;

  if (activeInput) {
    const cursorPosition = activeInput.selectionStart || 0;
    const inputIndex = inputValues.findIndex((value) => value === activeInput.value);

    if (key === "CLEAR") {
      updatedValues[inputIndex] = "";
    } else if (key === "?123" || key === "ABC") {
      setActiveKeyboard((prevKeyboard) => (prevKeyboard === "alpha" ? "symbol" : "alpha"));
    } else if (key === "~") {
      if (cursorPosition > 0) {
        updatedValues[inputIndex] =
          updatedValues[inputIndex].slice(0, cursorPosition - 1) +
          updatedValues[inputIndex].slice(cursorPosition);
      }
    } else if (key === "SPACEBAR") {
      if (cursorPosition >= 0) {
        updatedValues[inputIndex] =
          updatedValues[inputIndex].slice(0, cursorPosition) +
          " " +
          updatedValues[inputIndex].slice(cursorPosition);
      } else {
        updatedValues[inputIndex] =
          key + updatedValues[inputIndex].slice(cursorPosition);
      }
    } else {
      updatedValues[inputIndex] =
        updatedValues[inputIndex].slice(0, cursorPosition) +
        key +
        updatedValues[inputIndex].slice(cursorPosition);
    }
  }

  return updatedValues;
};
